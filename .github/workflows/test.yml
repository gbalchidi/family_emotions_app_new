name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/testdb" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
        echo "ANTHROPIC_API_KEY=test-key" >> $GITHUB_ENV
        echo "TELEGRAM_BOT_TOKEN=test-token" >> $GITHUB_ENV

    - name: Run linting
      run: |
        poetry run black --check .
        poetry run ruff check .
        poetry run mypy src tests

    - name: Run unit tests
      run: |
        poetry run pytest tests/unit -v \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=80

    - name: Run integration tests
      run: |
        poetry run pytest tests/integration -v \
          --cov=src \
          --cov-append \
          --cov-report=xml \
          --cov-report=html

    - name: Run E2E tests
      run: |
        poetry run pytest tests/e2e -v \
          --cov=src \
          --cov-append \
          --cov-report=xml \
          --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

    - name: Upload coverage reports to GitHub
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports-${{ matrix.python-version }}
        path: htmlcov/

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Run security scan with bandit
      run: |
        poetry run bandit -r src/ -f json -o bandit-report.json || true
        poetry run bandit -r src/ -f txt

    - name: Run safety check
      run: |
        poetry run safety check --json --output safety-report.json || true
        poetry run safety check

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  performance-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/testdb" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
        echo "ANTHROPIC_API_KEY=test-key" >> $GITHUB_ENV

    - name: Run performance tests
      run: |
        poetry run pytest tests/e2e -v \
          -m "performance" \
          --benchmark-only \
          --benchmark-json=benchmark.json

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: benchmark.json

  docker-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t family-emotions-light:test .

    - name: Run container health check
      run: |
        docker run --rm --health-interval=5s --health-timeout=3s --health-retries=3 \
          -e DATABASE_URL=sqlite:///test.db \
          -e REDIS_URL=redis://localhost:6379 \
          -e ANTHROPIC_API_KEY=test-key \
          -e TELEGRAM_BOT_TOKEN=test-token \
          family-emotions-light:test \
          python -c "import src; print('Container startup successful')"

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for SonarCloud

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Run tests for SonarCloud
      run: |
        poetry run pytest tests/ -v \
          --cov=src \
          --cov-report=xml \
          --junit-xml=test-results.xml

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  notify:
    runs-on: ubuntu-latest
    needs: [test, security-scan, code-quality]
    if: always()
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.security-scan.result == 'success' }}
      run: |
        echo "✅ All tests passed successfully!"
        echo "- Unit tests: ✅"
        echo "- Integration tests: ✅" 
        echo "- E2E tests: ✅"
        echo "- Security scan: ✅"
        echo "- Code quality: ✅"

    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.security-scan.result == 'failure' }}
      run: |
        echo "❌ Some tests failed!"
        echo "- Test job: ${{ needs.test.result }}"
        echo "- Security scan: ${{ needs.security-scan.result }}"
        echo "- Code quality: ${{ needs.code-quality.result }}"
        exit 1