"""Start command handler."""

from aiogram import Router, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext

from src.application.services.user_service import UserService
from src.infrastructure.persistence.database import database
from src.infrastructure.persistence.user_repository import SqlAlchemyUserRepository
from src.presentation.telegram.keyboards import get_main_menu
from src.presentation.telegram.states import RegistrationStates

router = Router()


@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext) -> None:
    """Handle /start command."""
    user_id = message.from_user.id
    
    # Check if user exists
    async with database.session() as session:
        repo = SqlAlchemyUserRepository(session)
        service = UserService(repo)
        user = await service.get_user_by_telegram_id(user_id)
    
    if user:
        # User exists, show main menu
        await message.answer(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.name}! üëã\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞. "
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=get_main_menu()
        )
    else:
        # New user, start registration
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Family Emotions Light! üåü\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —ç–º–æ—Ü–∏–∏ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞.\n\n"
            "–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"
        )
        await state.set_state(RegistrationStates.waiting_for_parent_name)