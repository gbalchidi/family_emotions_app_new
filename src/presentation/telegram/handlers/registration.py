"""Registration flow handlers."""

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext

from src.application.commands.user_commands import RegisterUserCommand
from src.application.services.user_service import UserService
from src.infrastructure.persistence.database import database
from src.infrastructure.persistence.user_repository import SqlAlchemyUserRepository
from src.presentation.telegram.keyboards import get_gender_keyboard, get_main_menu
from src.presentation.telegram.states import RegistrationStates

router = Router()


@router.message(RegistrationStates.waiting_for_parent_name)
async def process_parent_name(message: types.Message, state: FSMContext) -> None:
    """Process parent name input."""
    parent_name = message.text.strip()
    
    if len(parent_name) < 2:
        await message.answer("–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        return
    
    await state.update_data(parent_name=parent_name)
    await message.answer(
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {parent_name}! üòä\n\n"
        "–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º —Ä–µ–±–µ–Ω–∫–µ.\n"
        "–ö–∞–∫ –∑–æ–≤—É—Ç –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?"
    )
    await state.set_state(RegistrationStates.waiting_for_child_name)


@router.message(RegistrationStates.waiting_for_child_name)
async def process_child_name(message: types.Message, state: FSMContext) -> None:
    """Process child name input."""
    child_name = message.text.strip()
    
    if len(child_name) < 2:
        await message.answer("–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–±–µ–Ω–∫–∞:")
        return
    
    await state.update_data(child_name=child_name)
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ–ª—å–∫–æ –ª–µ—Ç {child_name}?\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º (–æ—Ç 1 –¥–æ 18):"
    )
    await state.set_state(RegistrationStates.waiting_for_child_age)


@router.message(RegistrationStates.waiting_for_child_age)
async def process_child_age(message: types.Message, state: FSMContext) -> None:
    """Process child age input."""
    try:
        age = int(message.text.strip())
        if not 1 <= age <= 18:
            raise ValueError()
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 18):"
        )
        return
    
    await state.update_data(child_age=age)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª —Ä–µ–±–µ–Ω–∫–∞:",
        reply_markup=get_gender_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_child_gender)


@router.callback_query(
    RegistrationStates.waiting_for_child_gender,
    F.data.startswith("gender:")
)
async def process_child_gender(
    callback: types.CallbackQuery,
    state: FSMContext
) -> None:
    """Process child gender selection."""
    gender = callback.data.split(":")[1]
    data = await state.get_data()
    
    # Register user
    async with database.session() as session:
        repo = SqlAlchemyUserRepository(session)
        service = UserService(repo)
        
        command = RegisterUserCommand(
            telegram_id=callback.from_user.id,
            telegram_username=callback.from_user.username or "",
            parent_name=data["parent_name"],
            child_name=data["child_name"],
            child_age=data["child_age"],
            child_gender=gender
        )
        
        try:
            user = await service.register_user(command)
            
            await callback.message.edit_text(
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
            )
            
            await callback.message.answer(
                f"–û—Ç–ª–∏—á–Ω–æ, {data['parent_name']}! üéâ\n\n"
                f"–Ø –∑–∞–ø–æ–º–Ω–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {data['child_name']}.\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏–∏ —Å —Ä–µ–±–µ–Ω–∫–æ–º\n"
                "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò\n"
                "‚Ä¢ –í–µ—Å—Ç–∏ –∏—Å—Ç–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–æ–≤\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
                reply_markup=get_main_menu()
            )
            
            await state.clear()
            
        except Exception as e:
            await callback.message.answer(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ /start"
            )
            await state.clear()
    
    await callback.answer()