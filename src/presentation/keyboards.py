"""Bot keyboards."""
from __future__ import annotations

from typing import Optional
from uuid import UUID

from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
)

from application.dto import ChildDTO


def main_menu_keyboard() -> ReplyKeyboardMarkup:
    """Create main menu keyboard according to documentation."""
    buttons = [
        [KeyboardButton(text="üí¨ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ñ—Ä–∞–∑—É —Ä–µ–±–µ–Ω–∫–∞")],
        [KeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω")],
        [KeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


def gender_keyboard() -> InlineKeyboardMarkup:
    """Create gender selection keyboard."""
    buttons = [
        [
            InlineKeyboardButton(text="üë¶ –ú–∞–ª—å—á–∏–∫", callback_data="gender_male"),
            InlineKeyboardButton(text="üëß –î–µ–≤–æ—á–∫–∞", callback_data="gender_female"),
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def yes_no_keyboard() -> InlineKeyboardMarkup:
    """Create yes/no keyboard."""
    buttons = [
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="yes"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="no"),
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def child_selection_keyboard(children: list[ChildDTO]) -> InlineKeyboardMarkup:
    """Create child selection keyboard."""
    buttons = []
    for child in children:
        age_text = f"{child.age_years} –ª–µ—Ç"
        if child.age_months:
            age_text = f"{child.age_years} –ª–µ—Ç {child.age_months} –º–µ—Å"
        
        button_text = f"{child.name} ({age_text})"
        buttons.append([
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"select_child_{child.id}"
            )
        ])
    
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def skip_context_keyboard() -> InlineKeyboardMarkup:
    """Create skip context keyboard."""
    buttons = [
        [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_context")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def back_to_menu_keyboard() -> InlineKeyboardMarkup:
    """Create back to menu keyboard."""
    buttons = [
        [InlineKeyboardButton(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def cancel_keyboard() -> InlineKeyboardMarkup:
    """Create cancel keyboard."""
    buttons = [
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)