"""Analysis handlers."""
from __future__ import annotations

from uuid import UUID

import structlog
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from application.commands import AnalyzeSituationCommand, GetUserCommand
from application.services.analysis_service import AnalysisService
from application.services.user_service import UserService
from domain.exceptions import DomainException
from domain.value_objects import EmotionalTone
from infrastructure.claude.adapter import ClaudeAdapter
from infrastructure.database.session import get_session
from infrastructure.database.repositories import (
    SQLAlchemySituationRepository,
    SQLAlchemyUserRepository,
)
from presentation.keyboards import (
    back_to_menu_keyboard,
    child_selection_keyboard,
    main_menu_keyboard,
    skip_context_keyboard,
)
from presentation.states import AnalysisStates

logger = structlog.get_logger()
router = Router(name="analysis")


@router.callback_query(F.data == "analyze_situation")
async def start_analysis(callback: CallbackQuery, state: FSMContext) -> None:
    """Start situation analysis."""
    if not callback.from_user:
        return

    async for session in get_session():
        try:
            user_repo = SQLAlchemyUserRepository(session)
            user_service = UserService(user_repo)

            # Get user
            get_user_cmd = GetUserCommand(telegram_id=callback.from_user.id)
            user = await user_service.get_user(get_user_cmd)

            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            if not user.onboarding_completed:
                await callback.answer(
                    "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", show_alert=True
                )
                return

            if not user.children:
                await callback.answer(
                    "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–±–µ–Ω–∫–µ", show_alert=True
                )
                return

            await state.update_data(user_id=str(user.id))

            if len(user.children) == 1:
                # Only one child, skip selection
                child = user.children[0]
                await state.update_data(child_id=str(child.id))
                await callback.message.edit_text(
                    f"–ê–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏ –¥–ª—è {child.name}\n\n"
                    "–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å.\n\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                    "‚Ä¢ –†–µ–±–µ–Ω–æ–∫ —É—Å—Ç—Ä–æ–∏–ª –∏—Å—Ç–µ—Ä–∏–∫—É –≤ –º–∞–≥–∞–∑–∏–Ω–µ\n"
                    "‚Ä¢ –ù–µ —Ö–æ—á–µ—Ç –¥–µ–ª–∞—Ç—å —É—Ä–æ–∫–∏\n"
                    "‚Ä¢ –î–µ—Ä–µ—Ç—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –¥–µ—Ç—å–º–∏\n\n"
                    "–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—à–µ—Ç–µ, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑.",
                    reply_markup=None,
                )
                await state.set_state(AnalysisStates.waiting_for_situation)
            else:
                # Multiple children, show selection
                await callback.message.edit_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
                    reply_markup=child_selection_keyboard(user.children),
                )
                await state.set_state(AnalysisStates.waiting_for_child_selection)

        except Exception as e:
            logger.exception("Error starting analysis")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(
    AnalysisStates.waiting_for_child_selection, F.data.startswith("select_child_")
)
async def select_child(callback: CallbackQuery, state: FSMContext) -> None:
    """Handle child selection."""
    if not callback.data:
        return

    child_id = callback.data.replace("select_child_", "")
    await state.update_data(child_id=child_id)

    data = await state.get_data()
    
    async for session in get_session():
        try:
            user_repo = SQLAlchemyUserRepository(session)
            user_service = UserService(user_repo)

            user = await user_service.get_user_by_id(UUID(data["user_id"]))
            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            child = next((c for c in user.children if str(c.id) == child_id), None)
            if not child:
                await callback.answer("–†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            await callback.message.edit_text(
                f"–ê–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏ –¥–ª—è {child.name}\n\n"
                "–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å.\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "‚Ä¢ –†–µ–±–µ–Ω–æ–∫ —É—Å—Ç—Ä–æ–∏–ª –∏—Å—Ç–µ—Ä–∏–∫—É –≤ –º–∞–≥–∞–∑–∏–Ω–µ\n"
                "‚Ä¢ –ù–µ —Ö–æ—á–µ—Ç –¥–µ–ª–∞—Ç—å —É—Ä–æ–∫–∏\n"
                "‚Ä¢ –î–µ—Ä–µ—Ç—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –¥–µ—Ç—å–º–∏\n\n"
                "–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—à–µ—Ç–µ, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑.",
            )
            await state.set_state(AnalysisStates.waiting_for_situation)

        except Exception as e:
            logger.exception("Error selecting child")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(AnalysisStates.waiting_for_situation)
async def process_situation(message: Message, state: FSMContext) -> None:
    """Process situation description."""
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–æ–º.")
        return

    if len(message.text) < 10:
        await message.answer(
            "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
        )
        return

    await state.update_data(situation=message.text)
    await message.answer(
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç?\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ –≠—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ –∏–ª–∏ –≤–ø–µ—Ä–≤—ã–µ?\n"
        "‚Ä¢ –ë—ã–ª–∏ –ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∂–∏–∑–Ω–∏ —Ä–µ–±–µ–Ω–∫–∞?\n"
        "‚Ä¢ –ö–∞–∫ –≤—ã –æ–±—ã—á–Ω–æ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç–µ –Ω–∞ —Ç–∞–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ?",
        reply_markup=skip_context_keyboard(),
    )
    await state.set_state(AnalysisStates.waiting_for_context)


@router.message(AnalysisStates.waiting_for_context)
async def process_context(message: Message, state: FSMContext) -> None:
    """Process additional context."""
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥.")
        return

    await state.update_data(context=message.text)
    await analyze_situation(message, state)


@router.callback_query(AnalysisStates.waiting_for_context, F.data == "skip_context")
async def skip_context(callback: CallbackQuery, state: FSMContext) -> None:
    """Skip adding context."""
    await callback.answer()
    await analyze_situation(callback.message, state)


async def analyze_situation(message: Message, state: FSMContext) -> None:
    """Analyze the situation."""
    data = await state.get_data()
    
    # Show loading message
    loading_msg = await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∏—Ç—É–∞—Ü–∏—é...")
    
    async for session in get_session():
        try:
            user_repo = SQLAlchemyUserRepository(session)
            situation_repo = SQLAlchemySituationRepository(session)
            claude_adapter = ClaudeAdapter()
            
            analysis_service = AnalysisService(
                user_repo, situation_repo, claude_adapter
            )

            # Analyze situation
            analyze_cmd = AnalyzeSituationCommand(
                user_id=UUID(data["user_id"]),
                child_id=UUID(data["child_id"]),
                description=data["situation"],
                context=data.get("context"),
            )
            
            situation = await analysis_service.analyze_situation(analyze_cmd)
            
            # Delete loading message
            await loading_msg.delete()
            
            # Format and send analysis result
            if situation.analysis_result:
                result = situation.analysis_result
                
                # Determine emoji based on emotional tone
                tone_emoji = {
                    EmotionalTone.POSITIVE: "‚úÖ",
                    EmotionalTone.NEUTRAL: "üí≠",
                    EmotionalTone.CONCERNING: "‚ö†Ô∏è",
                    EmotionalTone.URGENT: "üö®",
                }.get(result.emotional_tone, "üí≠")
                
                response = f"{tone_emoji} **–ê–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏ –¥–ª—è {situation.child_name}**\n\n"
                
                response += f"**üîç –°–∫—Ä—ã—Ç—ã–π —Å–º—ã—Å–ª:**\n{result.hidden_meaning}\n\n"
                
                response += "**‚úÖ –ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å–µ–π—á–∞—Å:**\n"
                for i, action in enumerate(result.immediate_actions, 1):
                    response += f"{i}. {action}\n"
                response += "\n"
                
                response += "**üìö –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
                for i, rec in enumerate(result.long_term_recommendations, 1):
                    response += f"{i}. {rec}\n"
                response += "\n"
                
                response += "**‚ùå –ß–µ–≥–æ –ù–ï –¥–µ–ª–∞—Ç—å:**\n"
                for i, dont in enumerate(result.what_not_to_do, 1):
                    response += f"{i}. {dont}\n"
                
                await message.answer(
                    response,
                    parse_mode="Markdown",
                    reply_markup=main_menu_keyboard(),
                )
            else:
                await message.answer(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=main_menu_keyboard(),
                )
            
            await state.clear()

        except DomainException as e:
            await loading_msg.delete()
            logger.error("Domain error analyzing situation", error=str(e))
            await message.answer(
                f"–û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=main_menu_keyboard(),
            )
            await state.clear()
        except Exception as e:
            await loading_msg.delete()
            logger.exception("Unexpected error analyzing situation")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=main_menu_keyboard(),
            )
            await state.clear()


@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext) -> None:
    """Go back to main menu."""
    await callback.answer()
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard(),
    )
    await state.clear()


@router.callback_query(F.data == "cancel")
async def cancel_analysis(callback: CallbackQuery, state: FSMContext) -> None:
    """Cancel current operation."""
    await callback.answer()
    await callback.message.edit_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard(),
    )
    await state.clear()