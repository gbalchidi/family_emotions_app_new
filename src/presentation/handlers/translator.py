"""Emotion translator handlers."""
from __future__ import annotations

import structlog
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from application.commands import GetUserCommand
from application.services.user_service import UserService
from infrastructure.claude.adapter import ClaudeAdapter
from infrastructure.database.session import get_session
from infrastructure.database.repositories import SQLAlchemyUserRepository
from presentation.keyboards import cancel_keyboard
from presentation.states import TranslatorStates

logger = structlog.get_logger()
router = Router(name="translator")


@router.message(F.text == "üí¨ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ñ—Ä–∞–∑—É —Ä–µ–±–µ–Ω–∫–∞")
@router.message(Command("translate"))
async def start_translation(message: Message, state: FSMContext) -> None:
    """Start emotion translation flow."""
    if not message.from_user:
        return
    
    async for session in get_session():
        try:
            user_repo = SQLAlchemyUserRepository(session)
            user_service = UserService(user_repo)
            
            # Check if user exists and completed onboarding
            get_user_cmd = GetUserCommand(telegram_id=message.from_user.id)
            user = await user_service.get_user(get_user_cmd)
            
            if not user or not user.onboarding_completed:
                await message.answer(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
                )
                return
            
            await state.update_data(user_id=str(user.id))
            
            await message.answer(
                "–ß—Ç–æ —Å–∫–∞–∑–∞–ª –≤–∞—à —Ä–µ–±–µ–Ω–æ–∫?\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –µ–≥–æ —Å–ª–æ–≤–∞–º–∏.\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑:\n"
                '"–û—Ç—Å—Ç–∞–Ω—å –æ—Ç –º–µ–Ω—è!"\n'
                '"–¢—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—à—å"\n'
                '"–í—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ" (–∫–æ–≥–¥–∞ —è–≤–Ω–æ –Ω–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)',
                reply_markup=cancel_keyboard(),
            )
            await state.set_state(TranslatorStates.waiting_for_phrase)
            
        except Exception as e:
            logger.exception("Error starting translation")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(TranslatorStates.waiting_for_phrase)
async def process_phrase(message: Message, state: FSMContext) -> None:
    """Process child's phrase for translation."""
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    
    phrase = message.text.strip()
    
    # Show typing while processing
    await message.bot.send_chat_action(message.chat.id, "typing")
    
    await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ—Ä–∞–∑—É...")
    
    try:
        # Use Claude to analyze the phrase
        claude = ClaudeAdapter()
        
        prompt = f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –¥–µ—Ç—Å–∫–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ —Å–µ–º–µ–π–Ω—ã–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º. 
        
–†–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ñ—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä—É—é —Å–∫–∞–∑–∞–ª —Ä–µ–±–µ–Ω–æ–∫: "{phrase}"

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É —Ñ—Ä–∞–∑—É –∏ –æ—Ç–≤–µ—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

üí≠ "{phrase}"

üìù –ß–¢–û –ù–ê –°–ê–ú–û–ú –î–ï–õ–ï –ß–£–í–°–¢–í–£–ï–¢ –†–ï–ë–ï–ù–û–ö:

üéØ –°–∫—Ä—ã—Ç—ã–π —Å–º—ã—Å–ª:
[–û–±—ä—è—Å–Ω–∏, —á—Ç–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —á—É–≤—Å—Ç–≤—É–µ—Ç –∏ —Ö–æ—á–µ—Ç —Å–∫–∞–∑–∞—Ç—å —Ä–µ–±–µ–Ω–æ–∫]

üòî –≠–º–æ—Ü–∏–∏:
[–ü–µ—Ä–µ—á–∏—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏]

üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:

–í–º–µ—Å—Ç–æ: [–¢–∏–ø–∏—á–Ω–∞—è –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è]
–°–∫–∞–∂–∏—Ç–µ: [–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞]

‚úÖ –ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å–µ–π—á–∞—Å:
1. [–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ 1]
2. [–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ 2]
3. [–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ 3]"""

        analysis = await claude.analyze_situation(
            situation_text=phrase,
            context=prompt,
            child_age=10,  # Default age
            child_name="—Ä–µ–±–µ–Ω–æ–∫"
        )
        
        # Send analysis result
        await message.answer(
            analysis.analysis_text,
            parse_mode="HTML"
        )
        
        # Add feedback keyboard
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üëç –ü–æ–ª–µ–∑–Ω–æ", callback_data="feedback_useful"),
                    InlineKeyboardButton(text="üëé –ù–µ –ø–æ–º–æ–≥–ª–æ", callback_data="feedback_not_useful"),
                ],
                [
                    InlineKeyboardButton(text="üí¨ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –µ—â–µ", callback_data="translate_more"),
                ],
            ]
        )
        
        await message.answer(
            "–ë—ã–ª–∞ –ª–∏ —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª–µ–∑–Ω–æ–π?",
            reply_markup=keyboard
        )
        
        await state.clear()
        
    except Exception as e:
        logger.exception("Error analyzing phrase", phrase=phrase)
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–∞–∑—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
            "–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        await state.clear()


@router.callback_query(F.data == "translate_more")
async def translate_more(callback: CallbackQuery, state: FSMContext) -> None:
    """Handle request to translate another phrase."""
    await callback.answer()
    await callback.message.answer(
        "–ß—Ç–æ –µ—â–µ —Å–∫–∞–∑–∞–ª –≤–∞—à —Ä–µ–±–µ–Ω–æ–∫?\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –µ–≥–æ —Å–ª–æ–≤–∞–º–∏.",
        reply_markup=cancel_keyboard(),
    )
    await state.set_state(TranslatorStates.waiting_for_phrase)


@router.callback_query(F.data == "cancel")
@router.message(Command("cancel"))
async def cancel_handler(update: Message | CallbackQuery, state: FSMContext) -> None:
    """Cancel current operation."""
    await state.clear()
    
    if isinstance(update, CallbackQuery):
        await update.answer()
        await update.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        await update.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")