"""Start and onboarding handlers."""
from __future__ import annotations

from datetime import datetime

import structlog
from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from application.commands import (
    AddChildCommand,
    CompleteOnboardingCommand,
    GetUserCommand,
    RegisterUserCommand,
)
from application.services.user_service import UserService
from domain.exceptions import DomainException
from domain.value_objects import Gender
from infrastructure.database.session import get_session
from infrastructure.database.repositories import SQLAlchemyUserRepository
from presentation.keyboards import (
    gender_keyboard,
    main_menu_keyboard,
    yes_no_keyboard,
)
from presentation.states import OnboardingStates

logger = structlog.get_logger()
router = Router(name="start")


@router.message(CommandStart())
async def start_handler(message: Message, state: FSMContext) -> None:
    """Handle /start command."""
    if not message.from_user:
        return

    async for session in get_session():
        try:
            user_repo = SQLAlchemyUserRepository(session)
            user_service = UserService(user_repo)

            # Check if user exists
            get_user_cmd = GetUserCommand(telegram_id=message.from_user.id)
            user = await user_service.get_user(get_user_cmd)

            if user:
                # User exists, show main menu
                await message.answer(
                    f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}! üëã\n\n"
                    "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?",
                    reply_markup=main_menu_keyboard(),
                )
                await state.clear()
            else:
                # Register new user
                register_cmd = RegisterUserCommand(
                    telegram_id=message.from_user.id,
                    username=message.from_user.username,
                    first_name=message.from_user.first_name,
                    last_name=message.from_user.last_name,
                    language_code=message.from_user.language_code,
                )
                user = await user_service.register_user(register_cmd)

                # Start onboarding
                await state.update_data(user_id=str(user.id))
                await message.answer(
                    f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
                    "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —ç–º–æ—Ü–∏–∏ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞.\n\n"
                    "–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º —Ä–µ–±–µ–Ω–∫–µ.\n\n"
                    "–ö–∞–∫ –∑–æ–≤—É—Ç –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?",
                )
                await state.set_state(OnboardingStates.waiting_for_child_name)

        except DomainException as e:
            logger.error("Domain error in start handler", error=str(e))
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
        except Exception as e:
            logger.exception("Unexpected error in start handler")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )


@router.message(OnboardingStates.waiting_for_child_name)
async def process_child_name(message: Message, state: FSMContext) -> None:
    """Process child name input."""
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–±–µ–Ω–∫–∞ —Ç–µ–∫—Å—Ç–æ–º.")
        return

    await state.update_data(child_name=message.text.strip())
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è {message.text.strip()}.\n\n"
        "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03.2018)"
    )
    await state.set_state(OnboardingStates.waiting_for_child_birth_date)


@router.message(OnboardingStates.waiting_for_child_birth_date)
async def process_child_birth_date(message: Message, state: FSMContext) -> None:
    """Process child birth date input."""
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º.")
        return

    try:
        # Parse date
        birth_date = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
        
        # Validate date
        if birth_date > datetime.now().date():
            await message.answer("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
            
        if birth_date < datetime(1900, 1, 1).date():
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        await state.update_data(child_birth_date=birth_date.isoformat())
        
        data = await state.get_data()
        await message.answer(
            f"–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª —Ä–µ–±–µ–Ω–∫–∞ {data['child_name']}:",
            reply_markup=gender_keyboard(),
        )
        await state.set_state(OnboardingStates.waiting_for_child_gender)

    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.2018"
        )


@router.callback_query(OnboardingStates.waiting_for_child_gender, F.data.startswith("gender_"))
async def process_child_gender(callback: CallbackQuery, state: FSMContext) -> None:
    """Process child gender selection."""
    if not callback.data:
        return

    gender = Gender.MALE if callback.data == "gender_male" else Gender.FEMALE
    
    data = await state.get_data()
    
    async for session in get_session():
        try:
            user_repo = SQLAlchemyUserRepository(session)
            user_service = UserService(user_repo)

            # Add child
            add_child_cmd = AddChildCommand(
                user_id=data["user_id"],
                name=data["child_name"],
                birth_date=datetime.fromisoformat(data["child_birth_date"]).date(),
                gender=gender,
            )
            child = await user_service.add_child(add_child_cmd)

            await callback.answer()
            await callback.message.edit_text(
                f"‚úÖ {child.name} –¥–æ–±–∞–≤–ª–µ–Ω(–∞)!\n\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: {child.age_years} –ª–µ—Ç {child.age_months} –º–µ—Å.\n\n"
                "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?",
                reply_markup=yes_no_keyboard(),
            )
            await state.set_state(OnboardingStates.waiting_for_another_child)

        except DomainException as e:
            logger.error("Domain error adding child", error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–±–µ–Ω–∫–∞", show_alert=True)
        except Exception as e:
            logger.exception("Unexpected error adding child")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(OnboardingStates.waiting_for_another_child, F.data == "yes")
async def add_another_child(callback: CallbackQuery, state: FSMContext) -> None:
    """Handle adding another child."""
    await callback.answer()
    await callback.message.edit_text("–ö–∞–∫ –∑–æ–≤—É—Ç –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞?")
    await state.set_state(OnboardingStates.waiting_for_child_name)


@router.callback_query(OnboardingStates.waiting_for_another_child, F.data == "no")
async def complete_onboarding(callback: CallbackQuery, state: FSMContext) -> None:
    """Complete onboarding process."""
    data = await state.get_data()
    
    async for session in get_session():
        try:
            user_repo = SQLAlchemyUserRepository(session)
            user_service = UserService(user_repo)

            # Complete onboarding
            complete_cmd = CompleteOnboardingCommand(user_id=data["user_id"])
            user = await user_service.complete_onboarding(complete_cmd)

            await callback.answer()
            await callback.message.edit_text(
                "üéâ –û—Ç–ª–∏—á–Ω–æ! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏–∏ —Å –≤–∞—à–∏–º —Ä–µ–±–µ–Ω–∫–æ–º\n"
                "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
                "‚Ä¢ –õ—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —ç–º–æ—Ü–∏–∏ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=main_menu_keyboard(),
            )
            await state.clear()

        except DomainException as e:
            logger.error("Domain error completing onboarding", error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", show_alert=True)
        except Exception as e:
            logger.exception("Unexpected error completing onboarding")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)